// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Schema from "../Data/Schema.bs.mjs";

function usePort(name) {
  var match = React.useState(function () {
        return [
                [],
                undefined
              ];
      });
  var setState = match[1];
  React.useEffect((function () {
          var port = chrome.runtime.connect({
                name: name
              });
          var onMessageListener = function (tag) {
            var snippets = tag._0.map(Schema.DescriptionSnippet.dateFix);
            setState(function (param) {
                  return [
                          snippets,
                          port
                        ];
                });
            console.log("app chrome port inbound", tag);
          };
          port.onMessage.addListener(onMessageListener);
          return (function () {
                    port.disconnect();
                  });
        }), []);
  return match[0];
}

var DescriptionSnippet = {
  usePort: usePort
};

function usePort$1(name) {
  var match = React.useState(function () {
        return {
                maybeThumbnailData: undefined,
                maybePort: undefined
              };
      });
  var setState = match[1];
  React.useEffect((function () {
          var port = chrome.runtime.connect({
                name: name
              });
          setState(function (state) {
                return {
                        maybeThumbnailData: state.maybeThumbnailData,
                        maybePort: port
                      };
              });
          console.log("effect", port);
          var onMessageListener = function (tag) {
            console.log("Preview onmessaglister: app chrome port inbound", tag);
            var payload = tag._0;
            setState(function (param) {
                  return {
                          maybeThumbnailData: payload,
                          maybePort: port
                        };
                });
          };
          port.onMessage.addListener(onMessageListener);
          return (function () {
                    console.log("disconnected hook", port);
                    port.disconnect();
                  });
        }), []);
  return match[0];
}

var Preview = {
  usePort: usePort$1
};

export {
  DescriptionSnippet ,
  Preview ,
}
/* react Not a pure module */
