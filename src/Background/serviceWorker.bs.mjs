// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../Data/Table.bs.mjs";
import Dexie from "dexie";
import * as Schema from "../Data/Schema.bs.mjs";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.mjs";
import * as Version$Dexie from "@dusty-phillips/rescript-dexie/src/Version.bs.mjs";

var dexie = new Dexie("hello dexie 1");

var schema = [
  Schema.DescriptionSnippet.Category.schema,
  Schema.DescriptionSnippet.schema
];

Version$Dexie.stores(dexie.version(1), schema);

dexie.open();

var x = Table.DescriptionSnippetCategory.put(dexie, {
      id: 0,
      name: "default"
    });

Table.DescriptionSnippet.put(dexie, {
      body: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
      category_id: 0,
      date: new Date(),
      id: 41,
      name: "Lorem Ipsum generator",
      order: 1
    });

var body = "Subscribe if youre new!\nhttps://www.patreon.com/ElmForReactDevs\nhttps://elmforreactdevs.com\n";

Table.DescriptionSnippet.put(dexie, {
      body: body,
      category_id: 0,
      date: new Date(),
      id: 1,
      name: "Subscribe!",
      order: 2
    });

var listeners = new Map();

chrome.runtime.onConnect.addListener(function (port) {
      console.log("connected", {
            name: port.name,
            port: port
          });
      port.onDisconnect.addListener(function () {
            port.disconnect();
            listeners.delete(port.name);
          });
      var match = port.name;
      switch (match) {
        case "Description.Snippets" :
            listeners.set(port.name, port);
            Js_promise2.then(Table.DescriptionSnippet.toArray(dexie), (function (descriptionSnippets) {
                    var message = {
                      payload: descriptionSnippets,
                      tag: "init"
                    };
                    port.postMessage(message);
                    return Promise.resolve();
                  }));
            return ;
        case "SnippetEditor" :
            listeners.set(port.name, port);
            port.onMessage.addListener(function (message) {
                  var match = message.tag;
                  switch (match) {
                    case "Table.DescriptionSnippet.add" :
                        var snippet = Schema.DescriptionSnippet.dateFix(message.payload);
                        Core__Promise.$$catch(Table.DescriptionSnippet.add(dexie, snippet).then(function (d) {
                                    return Table.DescriptionSnippet.toArray(dexie);
                                  }).then(function (descriptionSnippets) {
                                  var message = {
                                    payload: descriptionSnippets,
                                    tag: "init"
                                  };
                                  port.postMessage(message);
                                  return Promise.resolve();
                                }), (function (err) {
                                console.log("err", err);
                                return Promise.resolve();
                              }));
                        return ;
                    case "Table.DescriptionSnippet.put" :
                        var snippet$1 = message.payload;
                        Table.DescriptionSnippet.put(dexie, snippet$1);
                        return ;
                    default:
                      throw {
                            RE_EXN_ID: "Match_failure",
                            _1: [
                              "ServiceWorker.res",
                              65,
                              8
                            ],
                            Error: new Error()
                          };
                  }
                });
            Js_promise2.then(Table.DescriptionSnippet.toArray(dexie), (function (descriptionSnippets) {
                    var message = {
                      payload: descriptionSnippets,
                      tag: "init"
                    };
                    port.postMessage(message);
                    return Promise.resolve();
                  }));
            return ;
        default:
          throw {
                RE_EXN_ID: "Match_failure",
                _1: [
                  "ServiceWorker.res",
                  45,
                  2
                ],
                Error: new Error()
              };
      }
    });

var p;

export {
  dexie ,
  schema ,
  x ,
  body ,
  p ,
  listeners ,
}
/* dexie Not a pure module */
