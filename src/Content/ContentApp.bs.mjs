// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Thumbnail from "./Widget/Thumbnail.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Description from "./Widget/Description.bs.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as TitleChecker from "./Widget/TitleChecker.bs.mjs";
import * as ThumbnailPreview from "./Widget/Home/ThumbnailPreview.bs.mjs";
import * as Client from "react-dom/client";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.mjs";
import * as Colors from "@mui/material/colors";
import * as Styles from "@mui/material/styles";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.mjs";
import * as Webapi__Dom__Document from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Document.bs.mjs";

function theme(outerTheme) {
  var newrecord = Caml_obj.obj_dup(outerTheme);
  return Styles.createTheme((newrecord.typography = {
                fontSize: 16.0
              }, newrecord.palette = {
                primary: {
                  main: Colors.pink[500]
                },
                secondary: {
                  main: "#9c27b0"
                }
              }, newrecord));
}

var observerConfig = {
  attributes: true,
  childList: true,
  subtree: true
};

var $$document = window.document;

var dummy = $$document.createElement("div");

function ContentApp$YouTubeStudioApp$VideoEdit(props) {
  var bodyEl = Core__Option.getWithDefault(Core__Option.flatMap(Webapi__Dom__Document.asHtmlDocument($$document), (function (prim) {
              return Caml_option.nullable_to_opt(prim.body);
            })), dummy);
  var update = function (state, action) {
    if (typeof action !== "object") {
      return {
              maybeUploadDialog: undefined
            };
    } else {
      return {
              maybeUploadDialog: Caml_option.some(action._0)
            };
    }
  };
  var match = React.useReducer(update, {
        maybeUploadDialog: undefined
      });
  var dispatch = match[1];
  var bodyWatcher = function (mutationList, observer) {
    mutationList.forEach(function (mutation) {
          var hasRemovedDialog = Array.prototype.slice.call(mutation.removedNodes).some(function (el) {
                var name = el.nodeName.toLowerCase();
                return name === "ytcp-uploads-dialog";
              });
          if (hasRemovedDialog) {
            return dispatch("RemovedDialog");
          }
          var target = mutation.target;
          var name = target.nodeName.toLocaleLowerCase();
          var attributeName = mutation.attributeName;
          var attribute = Core__Option.flatMap(Webapi__Dom__Element.ofNode(target), (function (node) {
                  return Caml_option.nullable_to_opt(node.getAttribute("workflow-step"));
                }));
          var match = [
            name,
            (attributeName == null) ? undefined : Caml_option.some(attributeName),
            attribute
          ];
          if (match.length !== 3) {
            return ;
          }
          var match$1 = match[0];
          if (match$1 === undefined) {
            return ;
          }
          if (match$1 !== "ytcp-uploads-dialog") {
            return ;
          }
          var match$2 = match[1];
          if (match$2 === undefined) {
            return ;
          }
          if (match$2 !== "workflow-step") {
            return ;
          }
          var match$3 = match[2];
          if (match$3 === undefined) {
            return ;
          }
          if (match$3 !== "DETAILS") {
            return ;
          }
          console.log("uploading!");
          dispatch({
                TAG: "SetDialog",
                _0: target
              });
        });
  };
  React.useEffect((function () {
          var bodyObserver = new MutationObserver(bodyWatcher);
          bodyObserver.observe(bodyEl, {
                attributes: true,
                childList: true,
                subtree: true
              });
          return (function () {
                    bodyObserver.disconnect();
                  });
        }), []);
  var detailsPage = function () {
    return [
            JsxRuntime.jsx(TitleChecker.make, {
                  maybeUploadDialog: undefined
                }, "details-page"),
            JsxRuntime.jsx(Thumbnail.make, {}),
            JsxRuntime.jsx(Description.make, {})
          ];
  };
  var dialog = match[0].maybeUploadDialog;
  if (dialog !== undefined) {
    var dialog$1 = Caml_option.valFromOption(dialog);
    return [
            JsxRuntime.jsx(TitleChecker.make, {
                  maybeUploadDialog: Webapi__Dom__Element.ofNode(dialog$1)
                }, "upload-dialog"),
            JsxRuntime.jsx(Thumbnail.make, {}),
            JsxRuntime.jsx(Description.make, {})
          ];
  } else {
    return detailsPage();
  }
}

var VideoEdit = {
  make: ContentApp$YouTubeStudioApp$VideoEdit
};

var YouTubeStudioApp = {
  VideoEdit: VideoEdit
};

var app = Core__Option.map(Caml_option.nullable_to_opt($$document.querySelector("title")), (function (titleEl) {
        var ContentApp = function (props) {
          var youtubeUrl = RescriptReactRouter.useUrl(undefined, undefined);
          var match = youtubeUrl.path;
          if (!match) {
            return JsxRuntime.jsx(ThumbnailPreview.make, {});
          }
          if (match.hd !== "video") {
            return JsxRuntime.jsx(ThumbnailPreview.make, {});
          }
          var match$1 = match.tl;
          if (!match$1) {
            return JsxRuntime.jsx(ThumbnailPreview.make, {});
          }
          var match$2 = match$1.tl;
          if (match$2 && match$2.hd === "edit" && !match$2.tl) {
            return JsxRuntime.jsx(ContentApp$YouTubeStudioApp$VideoEdit, {});
          } else {
            return JsxRuntime.jsx(ThumbnailPreview.make, {});
          }
        };
        var root = Client.createRoot(dummy);
        root.render(JsxRuntime.jsx(Styles.ThemeProvider, {
                  children: JsxRuntime.jsx(ContentApp, {}),
                  theme: theme
                }));
      }));

export {
  theme ,
  observerConfig ,
  $$document ,
  dummy ,
  YouTubeStudioApp ,
  app ,
}
/* document Not a pure module */
