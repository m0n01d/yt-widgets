// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as TitleChecker from "./Widget/TitleChecker.bs.mjs";
import * as Client from "react-dom/client";

var observerConfig = {
  attributes: false,
  childList: true,
  subtree: true
};

var $$document = window.document;

var dummy = $$document.createElement("div");

function update(state, action) {
  return {
          currentPage: action._0
        };
}

var app = Belt_Option.map(Caml_option.nullable_to_opt($$document.querySelector("title")), (function (titleEl) {
        var App = function (props) {
          var match = React.useReducer(update, {
                currentPage: /* Other */1
              });
          var dispatch = match[1];
          var onMessageListener = function (port) {
            console.log(port);
          };
          var port = chrome.runtime.connect({
                name: "yt-widgets-content"
              });
          port.onMessage.addListener(onMessageListener);
          var titleElWatcher = function (mutationList, observer) {
            console.log("title changed", mutationList);
            var title = Belt_Option.mapWithDefault(Belt_Option.map(Belt_Array.get(mutationList, 0), (function (prim) {
                        return prim.target;
                      })), "", (function (prim) {
                    return prim.textContent;
                  }));
            var route = Js_string.split(" - ", title);
            console.log("route", route);
            if (route.length !== 2) {
              return Curry._1(dispatch, /* SetPage */{
                          _0: /* Other */1
                        });
            }
            var match = route[0];
            if (match === "Video details") {
              return Curry._1(dispatch, /* SetPage */{
                          _0: /* Details */0
                        });
            } else {
              return Curry._1(dispatch, /* SetPage */{
                          _0: /* Other */1
                        });
            }
          };
          React.useEffect((function () {
                  var titleObserver = new MutationObserver(titleElWatcher);
                  titleObserver.observe(titleEl, observerConfig);
                  return (function (param) {
                            titleObserver.disconnect();
                          });
                }), []);
          var match$1 = match[0].currentPage;
          var widgets = match$1 ? [] : [React.createElement(TitleChecker.make, {})];
          console.log("which widgets", widgets);
          return widgets;
        };
        var root = Client.createRoot(dummy);
        root.render(React.createElement(App, {}));
      }));

export {
  observerConfig ,
  $$document ,
  dummy ,
  update ,
  app ,
}
/* document Not a pure module */
