// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as TitleChecker from "./Widget/TitleChecker.bs.mjs";
import * as Client from "react-dom/client";

var observerConfig = {
  attributes: false,
  childList: true,
  subtree: true
};

var $$document = window.document;

var dummy = $$document.createElement("div");

var documentTitle_ = $$document.querySelector("title");

var documentTitle_$1 = (documentTitle_ == null) ? undefined : Caml_option.some(documentTitle_);

var documentTitle = Belt_Option.getWithDefault(documentTitle_$1, dummy);

function update(state, action) {
  if (action) {
    return {
            currentPage: action._0
          };
  } else {
    return state;
  }
}

function App$App(props) {
  var match = React.useReducer(update, {
        currentPage: /* Other */1
      });
  var dispatch = match[1];
  var onMessageListener = function (port) {
    console.log("App is listening for Chrome Messages", port);
  };
  var watcher = function (mutationList, observer) {
    var title = Belt_Option.mapWithDefault(Belt_Option.map(Belt_Array.get(mutationList, 0), (function (prim) {
                return prim.target;
              })), "", (function (prim) {
            return prim.textContent;
          }));
    var t = Js_string.split(" - ", title);
    if (t.length !== 2) {
      return ;
    }
    var match = t[0];
    if (match !== "Video details") {
      return ;
    }
    setTimeout((function (param) {
            Curry._1(dispatch, /* SetPage */{
                  _0: /* Details */0
                });
          }), 1000);
  };
  var port = chrome.runtime.connect({
        name: "yt-widgets-content"
      });
  port.onMessage.addListener(onMessageListener);
  var observer = new MutationObserver(watcher);
  React.useEffect(function () {
        return (function (param) {
                  observer.disconnect();
                });
      });
  var match$1 = match[0].currentPage;
  var widgets = match$1 ? [] : (console.log("details"), [React.createElement(TitleChecker.make, {})]);
  observer.observe(documentTitle, observerConfig);
  return widgets;
}

var App = {
  make: App$App
};

var root = Client.createRoot(dummy);

root.render(React.createElement(App$App, {}));

export {
  observerConfig ,
  $$document ,
  dummy ,
  documentTitle_$1 as documentTitle_,
  documentTitle ,
  update ,
  App ,
  root ,
}
/* document Not a pure module */
