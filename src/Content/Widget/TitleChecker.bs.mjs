// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ReactDom from "react-dom";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var observerConfig = {
  attributes: false,
  childList: true,
  subtree: true
};

var viewOverLimit = React.createElement("div", {
      id: "TitleChecker.viewOverLimit",
      style: {
        color: "#dc3545",
        fontSize: "12px",
        padding: "0.2rem 1rem",
        textAlign: "right"
      }
    }, "Your title is a little long there, pal...");

function make(props) {
  var maybeVideoTitleEl = document.querySelector("ytcp-video-title");
  var maybeVideoTitleInput = Belt_Option.flatMap((maybeVideoTitleEl == null) ? undefined : Caml_option.some(maybeVideoTitleEl), (function (el) {
          return Caml_option.nullable_to_opt(el.querySelector("ytcp-social-suggestion-input"));
        }));
  var initialState = Belt_Option.mapWithDefault(maybeVideoTitleInput, {
        TAG: /* UnderLimit */1,
        _0: 0.0
      }, (function (videoTitleEl) {
          var len = videoTitleEl.innerText.length;
          if (len > 60.0) {
            return {
                    TAG: /* OverLimit */0,
                    _0: len
                  };
          } else {
            return {
                    TAG: /* UnderLimit */1,
                    _0: len
                  };
          }
        }));
  var match = React.useState(function () {
        return initialState;
      });
  var setState = match[1];
  var state = match[0];
  var viewProgress = function (len) {
    var w_ = len / 60.0 * 100.0;
    var w = Math.min(w_, 100.0);
    var width = String(w) + "%";
    var backgroundColor = len > 60.0 ? "red" : (
        len > 42.0 ? "yellow" : "green"
      );
    return React.createElement("div", {
                id: "TitleChecker.progress"
              }, React.createElement("div", {
                    style: {
                      backgroundColor: backgroundColor,
                      height: "2px",
                      width: width
                    }
                  }));
  };
  var children;
  children = state.TAG === /* OverLimit */0 ? [
      viewProgress(state._0),
      viewOverLimit
    ] : [viewProgress(state._0)];
  var watcher = function (mutationList, observer) {
    var textboxLen = Belt_Option.mapWithDefault(Belt_Option.map(Belt_Option.map(Belt_Array.get(mutationList, 0), (function (mutation) {
                    return mutation.target;
                  })), (function (el) {
                return el.innerText;
              })), 0.0, (function (text) {
            return text.length;
          }));
    if (textboxLen > 60.0) {
      return Curry._1(setState, (function (param) {
                    return {
                            TAG: /* OverLimit */0,
                            _0: textboxLen
                          };
                  }));
    } else {
      return Curry._1(setState, (function (param) {
                    return {
                            TAG: /* UnderLimit */1,
                            _0: textboxLen
                          };
                  }));
    }
  };
  var observer = new MutationObserver(watcher);
  if (!(maybeVideoTitleEl == null) && maybeVideoTitleInput !== undefined) {
    observer.observe(Caml_option.valFromOption(maybeVideoTitleInput), observerConfig);
    return ReactDom.createPortal(children, maybeVideoTitleEl);
  } else {
    return React.createElement(React.Fragment, undefined);
  }
}

export {
  observerConfig ,
  viewOverLimit ,
  make ,
}
/* viewOverLimit Not a pure module */
