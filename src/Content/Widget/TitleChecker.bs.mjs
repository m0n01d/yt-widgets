// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ReactDom from "react-dom";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var observerConfig = {
  attributes: false,
  childList: true,
  subtree: true
};

var parentVideoTitleSelector = "ytcp-video-title";

function pause(param) {
  return new Promise((function (resolve, reject) {
                setTimeout((function (param) {
                        resolve(undefined);
                      }), 1333);
              }));
}

var TestError = /* @__PURE__ */Caml_exceptions.create("TitleChecker.TestError");

async function queryDomHelp(selector, n) {
  await pause();
  if (n < 0) {
    return Promise.reject({
                RE_EXN_ID: TestError,
                _1: "huh"
              });
  }
  var maybeEl = document.querySelector(selector);
  if (maybeEl == null) {
    return await queryDomHelp(selector, n - 1 | 0);
  } else {
    return Promise.resolve(maybeEl);
  }
}

function query(param) {
  var videoTitleElQuery = queryDomHelp(parentVideoTitleSelector, 3).then(function (el) {
        return el;
      });
  var videoTitleInputQuery = queryDomHelp("ytcp-social-suggestion-input", 3).then(function (el) {
        return el;
      });
  return Promise.all([
              videoTitleElQuery,
              videoTitleInputQuery
            ]);
}

var viewOverLimit = React.createElement("div", {
      id: "TitleChecker.viewOverLimit",
      style: {
        color: "#dc3545",
        fontSize: "12px",
        padding: "0.2rem 1rem",
        textAlign: "right"
      }
    }, "Your title is a little long there, pal...");

function TitleChecker(props) {
  var match = React.useState(function (param) {
        return {
                TAG: "UnderLimit",
                _0: 0.0
              };
      });
  var setState = match[1];
  var state = match[0];
  var match$1 = React.useState(function (param) {
        return [
                undefined,
                undefined
              ];
      });
  var setEls = match$1[1];
  var match$2 = match$1[0];
  var maybeVideoTitleInput = match$2[1];
  var maybeVideoTitleEl = match$2[0];
  React.useEffect((function (param) {
          query().then(function (param) {
                if (param.length !== 2) {
                  throw {
                        RE_EXN_ID: "Match_failure",
                        _1: [
                          "TitleChecker.res",
                          61,
                          19
                        ],
                        Error: new Error()
                      };
                }
                var videoTitleEl = param[0];
                var videoTitleInput = param[1];
                Curry._1(setEls, (function (param) {
                        return [
                                Caml_option.some(videoTitleEl),
                                Caml_option.some(videoTitleInput)
                              ];
                      }));
                var text = videoTitleInput.innerText;
                var len = text.length;
                var initialState = len > 60.0 ? ({
                      TAG: "OverLimit",
                      _0: len
                    }) : ({
                      TAG: "UnderLimit",
                      _0: len
                    });
                Curry._1(setState, (function (param) {
                        return initialState;
                      }));
                return Promise.resolve();
              });
        }), []);
  var viewProgress = function (len) {
    var w_ = len / 60.0 * 100.0;
    var w = Math.min(w_, 100.0);
    var width = String(w) + "%";
    var backgroundColor = len > 60.0 ? "red" : (
        len > 42.0 ? "yellow" : "green"
      );
    return React.createElement("div", undefined, React.createElement("div", {
                    style: {
                      backgroundColor: backgroundColor,
                      height: "2px",
                      width: width
                    }
                  }));
  };
  var children;
  children = state.TAG === "OverLimit" ? [
      viewProgress(state._0),
      viewOverLimit
    ] : [viewProgress(state._0)];
  if (maybeVideoTitleEl === undefined) {
    return React.createElement(React.Fragment, {});
  }
  if (maybeVideoTitleInput === undefined) {
    return React.createElement(React.Fragment, {});
  }
  var videoTitleInput = Caml_option.valFromOption(maybeVideoTitleInput);
  var watcher = function (mutationList, observer) {
    var text = videoTitleInput.innerText;
    var textboxLen = text.length;
    if (textboxLen > 60.0) {
      Curry._1(setState, (function (param) {
              return {
                      TAG: "OverLimit",
                      _0: textboxLen
                    };
            }));
    } else {
      Curry._1(setState, (function (param) {
              return {
                      TAG: "UnderLimit",
                      _0: textboxLen
                    };
            }));
    }
    observer.disconnect();
  };
  var observer = new MutationObserver(watcher);
  observer.observe(videoTitleInput, observerConfig);
  return ReactDom.createPortal(children, Caml_option.valFromOption(maybeVideoTitleEl));
}

var make = TitleChecker;

export {
  observerConfig ,
  parentVideoTitleSelector ,
  pause ,
  TestError ,
  queryDomHelp ,
  query ,
  viewOverLimit ,
  make ,
}
/* viewOverLimit Not a pure module */
