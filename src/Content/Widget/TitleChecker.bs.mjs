// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "@rescript/react/src/React.bs.mjs";
import * as React$1 from "react";
import * as ReactDom from "react-dom";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var observerConfig = {
  attributes: false,
  childList: true,
  subtree: true
};

var parentVideoTitleSelector = "ytcp-video-title";

var viewOverLimit = React$1.createElement("div", {
      id: "TitleChecker.viewOverLimit",
      style: {
        color: "#dc3545",
        fontSize: "12px",
        padding: "0.2rem 1rem",
        textAlign: "right"
      }
    }, "Your title is a little long there, pal...");

function TitleChecker$TitleChecker(props) {
  console.log("init title checker");
  var maybeVideoTitleEl = document.querySelector(parentVideoTitleSelector);
  var maybeVideoTitleEl$1 = (maybeVideoTitleEl == null) ? undefined : Caml_option.some(maybeVideoTitleEl);
  var maybeVideoTitleInput = Belt_Option.flatMap(maybeVideoTitleEl$1, (function (el) {
          return Caml_option.nullable_to_opt(el.querySelector("ytcp-social-suggestion-input"));
        }));
  console.log(maybeVideoTitleEl$1, maybeVideoTitleInput);
  var initialState = Belt_Option.mapWithDefault(maybeVideoTitleInput, {
        TAG: "UnderLimit",
        _0: 0.0
      }, (function (videoTitleEl) {
          var len = videoTitleEl.innerText.length;
          if (len > 60.0) {
            return {
                    TAG: "OverLimit",
                    _0: len
                  };
          } else {
            return {
                    TAG: "UnderLimit",
                    _0: len
                  };
          }
        }));
  var match = React$1.useState(function (param) {
        return initialState;
      });
  var setState = match[1];
  var state = match[0];
  var viewProgress = function (len) {
    var w_ = len / 60.0 * 100.0;
    var w = Math.min(w_, 100.0);
    var width = String(w) + "%";
    var backgroundColor = len > 60.0 ? "red" : (
        len > 42.0 ? "yellow" : "green"
      );
    return React$1.createElement("div", undefined, React$1.createElement("div", {
                    style: {
                      backgroundColor: backgroundColor,
                      height: "2px",
                      width: width
                    }
                  }));
  };
  var children;
  children = state.TAG === "OverLimit" ? [
      viewProgress(state._0),
      viewOverLimit
    ] : [viewProgress(state._0)];
  var watcher = function (mutationList, observer) {
    var textboxLen = Belt_Option.mapWithDefault(Belt_Option.map(Belt_Option.map(Belt_Array.get(mutationList, 0), (function (mutation) {
                    return mutation.target;
                  })), (function (el) {
                return el.innerText;
              })), 0.0, (function (text) {
            return text.length;
          }));
    if (textboxLen > 60.0) {
      return Curry._1(setState, (function (param) {
                    return {
                            TAG: "OverLimit",
                            _0: textboxLen
                          };
                  }));
    } else {
      return Curry._1(setState, (function (param) {
                    return {
                            TAG: "UnderLimit",
                            _0: textboxLen
                          };
                  }));
    }
  };
  var observer = new MutationObserver(watcher);
  if (!(maybeVideoTitleEl == null) && maybeVideoTitleInput !== undefined) {
    observer.observe(Caml_option.valFromOption(maybeVideoTitleInput), observerConfig);
    return ReactDom.createPortal(children, maybeVideoTitleEl);
  } else {
    return React$1.createElement(React$1.Fragment, {});
  }
}

var TitleChecker = {
  viewOverLimit: viewOverLimit,
  make: TitleChecker$TitleChecker
};

function pause(param) {
  return new Promise((function (resolve, reject) {
                setTimeout((function (param) {
                        resolve(undefined);
                      }), 333);
              }));
}

var TestError = /* @__PURE__ */Caml_exceptions.create("TitleChecker.TestError");

async function queryDomHelp(selector, n) {
  console.log("n", n, selector);
  if (n < 0) {
    console.log("n", n, selector);
    return Promise.reject({
                RE_EXN_ID: TestError,
                _1: "huh"
              });
  }
  console.log("waiting...");
  await pause();
  console.log("querying...");
  var maybeVideoTitleEl = document.querySelector(selector);
  console.log(n, (maybeVideoTitleEl == null) ? undefined : Caml_option.some(maybeVideoTitleEl));
  if (maybeVideoTitleEl == null) {
    return await queryDomHelp(selector, n - 1 | 0);
  } else {
    return Promise.resolve(maybeVideoTitleEl);
  }
}

var videoTitleElQuery = queryDomHelp(parentVideoTitleSelector, 3);

var videoTitleInputQuery = queryDomHelp("ytcp-social-suggestion-input", 3);

var querySelectors = Promise.all([
      videoTitleElQuery,
      videoTitleInputQuery
    ]);

var queryAndLoad = querySelectors.then(function (param) {
      return Promise.resolve(TitleChecker$TitleChecker);
    });

var make = React.lazy_(function (param) {
      return queryAndLoad;
    });

export {
  observerConfig ,
  parentVideoTitleSelector ,
  TitleChecker ,
  pause ,
  TestError ,
  queryDomHelp ,
  videoTitleElQuery ,
  videoTitleInputQuery ,
  querySelectors ,
  queryAndLoad ,
  make ,
}
/* viewOverLimit Not a pure module */
