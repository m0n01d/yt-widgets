// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ui from "../Ui.bs.mjs";
import * as Hooks from "../../Util/Hooks.bs.mjs";
import * as React from "react";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as ColorJs from "color.js";
import * as ReactDom from "react-dom";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as ReactQuery from "@rescriptbr/react-query/src/ReactQuery.bs.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";
import Box from "@mui/material/Box";
import * as JsxRuntime from "react/jsx-runtime";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import * as ReactQuery$1 from "@tanstack/react-query";
import Preview from "@mui/icons-material/Preview";
import * as Webapi__Dom__HtmlInputElement from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__HtmlInputElement.bs.mjs";

var targetElSelector = "ytcp-video-thumbnail-editor";

var stillPickerSelector = "ytcp-video-custom-still-editor";

var thumbnailImgSelector = "ytcp-thumbnail-uploader img#img-with-fallback";

var fileLoader = "ytcp-thumbnail-uploader input#file-loader";

var titleElSelector = "ytcp-video-title #textbox";

function query(param) {
  return Promise.all([
                targetElSelector,
                stillPickerSelector,
                thumbnailImgSelector,
                fileLoader,
                titleElSelector
              ].map(function (selector) {
                  return Js_promise2.then(Ui.queryDom(undefined, selector, 3), (function (el) {
                                return el;
                              }));
                }));
}

function Thumbnail$Palette(props) {
  var src = props.src;
  var match = React.useState(function () {
        return [];
      });
  var setColors = match[1];
  React.useEffect((function () {
          Js_promise2.then(ColorJs.prominent(src), (function (theColorPalette) {
                  setColors(function (param) {
                        return theColorPalette;
                      });
                  return Promise.resolve();
                }));
        }), [src]);
  return JsxRuntime.jsx("div", {
              children: match[0].map(function (color) {
                    var bgColor = "rgb(" + Js_array.joinWith(",", color) + ")";
                    return JsxRuntime.jsx("span", {
                                style: {
                                  background: bgColor,
                                  height: "52px",
                                  flex: "1 0 0"
                                }
                              });
                  }),
              style: {
                display: "flex",
                margin: "1em 0"
              }
            });
}

var Palette = {
  make: Thumbnail$Palette
};

function update(state, action) {
  if (typeof action !== "object") {
    if (action === "ClosedDialog") {
      return {
              maybeThumbnailEl: state.maybeThumbnailEl,
              maybeImgSrc: state.maybeImgSrc,
              maybeDialog: undefined,
              maybeTitle: state.maybeTitle
            };
    } else {
      return {
              maybeThumbnailEl: state.maybeThumbnailEl,
              maybeImgSrc: state.maybeImgSrc,
              maybeDialog: state.maybeDialog,
              maybeTitle: undefined
            };
    }
  }
  switch (action.TAG) {
    case "ClickedPreviewThumb" :
        return {
                maybeThumbnailEl: state.maybeThumbnailEl,
                maybeImgSrc: state.maybeImgSrc,
                maybeDialog: Caml_option.some(undefined),
                maybeTitle: action._1
              };
    case "SetImgSrc" :
        return {
                maybeThumbnailEl: state.maybeThumbnailEl,
                maybeImgSrc: action._0,
                maybeDialog: state.maybeDialog,
                maybeTitle: state.maybeTitle
              };
    case "SetThumbnailEl" :
        var el = action._0;
        var maybeImgSrc = Belt_Option.map(Caml_option.nullable_to_opt(el.getAttribute("src")), (function (s) {
                return {
                        TAG: "FromYoutube",
                        _0: s
                      };
              }));
        return {
                maybeThumbnailEl: Caml_option.some(el),
                maybeImgSrc: maybeImgSrc,
                maybeDialog: state.maybeDialog,
                maybeTitle: state.maybeTitle
              };
    
  }
}

function viewThumbnail(src) {
  return JsxRuntime.jsxs(Box, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("img", {
                              style: {
                                width: "100%"
                              },
                              src: src
                            }),
                        JsxRuntime.jsx("span", {
                              style: {
                                background: "white",
                                border: "1px solid black",
                                bottom: "0",
                                left: "33%",
                                position: "absolute",
                                top: "0",
                                width: "2px",
                                zIndex: "1"
                              }
                            }),
                        JsxRuntime.jsx("span", {
                              style: {
                                background: "white",
                                border: "1px solid black",
                                bottom: "0",
                                left: "66%",
                                position: "absolute",
                                top: "0",
                                width: "2px",
                                zIndex: "1"
                              }
                            }),
                        JsxRuntime.jsx("span", {
                              style: {
                                background: "white",
                                border: "1px solid black",
                                height: "2px",
                                left: "0",
                                position: "absolute",
                                right: "0",
                                top: "33%",
                                zIndex: "1"
                              }
                            }),
                        JsxRuntime.jsx("span", {
                              style: {
                                background: "white",
                                border: "1px solid black",
                                height: "2px",
                                left: "0",
                                position: "absolute",
                                right: "0",
                                top: "66%",
                                zIndex: "1"
                              }
                            })
                      ],
                      style: {
                        display: "block",
                        margin: "0.2rem 0.25rem",
                        position: "relative"
                      }
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(Thumbnail$Palette, {
                            src: src
                          })
                    })
              ]
            });
}

function Thumbnail$Preview(props) {
  var initialImgSrc = Belt_Option.map(Belt_Option.flatMap(Caml_option.nullable_to_opt(document.querySelector(thumbnailImgSelector)), (function (img) {
              return Caml_option.nullable_to_opt(img.getAttribute("src"));
            })), (function (s) {
          return {
                  TAG: "FromYoutube",
                  _0: s
                };
        }));
  var initialState = {
    maybeThumbnailEl: undefined,
    maybeImgSrc: initialImgSrc,
    maybeDialog: undefined,
    maybeTitle: undefined
  };
  var match = React.useReducer(update, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = Hooks.Preview.usePort("Thumbnail.Preview");
  var maybePort = match$1.maybePort;
  React.useEffect((function () {
          var match = state.maybeImgSrc;
          var match$1 = state.maybeTitle;
          if (match !== undefined && match.TAG === "FromUser" && match$1 !== undefined) {
            var src = match._0;
            Belt_Option.mapWithDefault(maybePort, undefined, (function (port) {
                    var message = {
                      TAG: "SavePreview",
                      src: src,
                      title: match$1
                    };
                    console.log("from thumbnail message:", message);
                    port.postMessage(message);
                  }));
            console.log(maybePort, "port out to bg with title and src");
          }
          return (function () {
                    dispatch("OpenedPreview");
                  });
        }), [state.maybeTitle]);
  var queryResult = ReactQuery$1.useQuery({
        queryKey: ["Thumbnail.Preview"],
        queryFn: query,
        retry: Caml_option.some(ReactQuery.retry({
                  NAME: "number",
                  VAL: 5
                })),
        retryDelay: Caml_option.some(ReactQuery.retryDelay({
                  NAME: "number",
                  VAL: 1000
                })),
        staleTime: Caml_option.some(ReactQuery.time({
                  NAME: "number",
                  VAL: 1
                })),
        refetchOnMount: Caml_option.some(ReactQuery.refetchOnMount({
                  NAME: "bool",
                  VAL: true
                })),
        refetchOnWindowFocus: Caml_option.some(ReactQuery.refetchOnWindowFocus({
                  NAME: "bool",
                  VAL: false
                }))
      });
  console.log(queryResult);
  if (queryResult.isError) {
    console.log(queryResult.error);
    return null;
  }
  var match$2 = queryResult.data;
  if (match$2 === undefined) {
    return null;
  }
  if (match$2.length !== 5) {
    return null;
  }
  var targetEl = match$2[0];
  var thumbnailImgEl = match$2[2];
  var fileLoaderEl = match$2[3];
  var titleEl = match$2[4];
  var fileInput = Webapi__Dom__HtmlInputElement.ofElement(fileLoaderEl);
  if (fileInput !== undefined) {
    var fileInput$1 = Caml_option.valFromOption(fileInput);
    var fn = function (ev) {
      var target = ev.target;
      var files = target.files;
      Belt_Array.forEach(files, (function (f) {
              var reader = new FileReader();
              reader.addEventListener("load", (function () {
                      var src = reader.result;
                      dispatch({
                            TAG: "SetImgSrc",
                            _0: {
                              TAG: "FromUser",
                              _0: src
                            }
                          });
                      console.log(src);
                    }));
              reader.readAsDataURL(f);
            }));
      fileInput$1.removeEventListener("change", fn);
    };
    fileInput$1.addEventListener("change", fn);
  } else {
    console.log("what");
  }
  if (undefined === state.maybeThumbnailEl) {
    dispatch({
          TAG: "SetThumbnailEl",
          _0: thumbnailImgEl
        });
  }
  var view = function (state, dispatch) {
    var viewDialog = function () {
      return JsxRuntime.jsx(Dialog, {
                  open: true,
                  children: "dialog",
                  fullWidth: true,
                  maxWidth: "xs",
                  onClose: (function (param, param$1) {
                      dispatch("ClosedDialog");
                    }),
                  sx: {
                    zIndex: 2206.0
                  }
                });
    };
    var match = state.maybeDialog;
    if (match !== undefined) {
      viewDialog();
    }
    var match$1 = state.maybeImgSrc;
    if (match$1 === undefined) {
      return null;
    }
    if (match$1.TAG !== "FromUser") {
      return JsxRuntime.jsx(Box, {
                  children: Caml_option.some(viewThumbnail(match$1._0))
                });
    }
    var src = match$1._0;
    var title_ = titleEl.textContent;
    return JsxRuntime.jsxs(Box, {
                style: {
                  position: "relative"
                },
                children: [
                  viewThumbnail(src),
                  JsxRuntime.jsx("div", {
                        children: JsxRuntime.jsx(Button, {
                              children: "Preview",
                              onClick: (function (param) {
                                  dispatch({
                                        TAG: "ClickedPreviewThumb",
                                        _0: src,
                                        _1: title_
                                      });
                                }),
                              endIcon: Caml_option.some(JsxRuntime.jsx(Preview, {})),
                              sx: {
                                left: "1rem",
                                position: "absolute",
                                top: "1rem"
                              },
                              variant: "contained"
                            })
                      })
                ]
              });
  };
  return ReactDom.createPortal(view(state, dispatch), targetEl);
}

var Preview$1 = {
  update: update,
  viewThumbnail: viewThumbnail,
  make: Thumbnail$Preview
};

var client = new ReactQuery$1.QueryClient();

function Thumbnail(props) {
  return JsxRuntime.jsx(ReactQuery$1.QueryClientProvider, {
              client: client,
              children: JsxRuntime.jsx(Thumbnail$Preview, {})
            });
}

var make = Thumbnail;

export {
  targetElSelector ,
  stillPickerSelector ,
  thumbnailImgSelector ,
  fileLoader ,
  titleElSelector ,
  query ,
  Palette ,
  Preview$1 as Preview,
  client ,
  make ,
}
/* client Not a pure module */
