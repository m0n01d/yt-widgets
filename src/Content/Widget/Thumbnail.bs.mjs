// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ui from "../Ui.bs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as ReactDom from "react-dom";
import * as ReactQuery from "@rescriptbr/react-query/src/ReactQuery.bs.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.mjs";
import * as ReactQuery$1 from "@tanstack/react-query";

var sidePanelSelector = "ytcp-video-metadata-editor-sidepanel";

var thumbnailImgSelector = "ytcp-thumbnail-uploader img#img-with-fallback";

var stillPickerSelector = "#still-picker";

var thumbnailUploader = "ytcp-thumbnail-uploader";

function query(param) {
  return Promise.all([
                sidePanelSelector,
                stillPickerSelector,
                thumbnailImgSelector,
                thumbnailUploader
              ].map(function (selector) {
                  return Js_promise2.then(Ui.queryDom(undefined, selector, 3), (function (el) {
                                return el;
                              }));
                }));
}

function viewThumbnail(src) {
  return React.createElement("div", {
              style: {
                height: "180px",
                margin: "0 auto",
                position: "relative",
                width: "320px"
              }
            }, React.createElement("img", {
                  src: src
                }), React.createElement("span", {
                  style: {
                    background: "white",
                    border: "1px solid black",
                    bottom: "0",
                    left: "33%",
                    position: "absolute",
                    top: "0",
                    width: "2px",
                    zIndex: "1"
                  }
                }), React.createElement("span", {
                  style: {
                    background: "white",
                    border: "1px solid black",
                    bottom: "0",
                    left: "66%",
                    position: "absolute",
                    top: "0",
                    width: "2px",
                    zIndex: "1"
                  }
                }), React.createElement("span", {
                  style: {
                    background: "white",
                    border: "1px solid black",
                    height: "2px",
                    left: "0",
                    position: "absolute",
                    right: "0",
                    top: "33%",
                    zIndex: "1"
                  }
                }), React.createElement("span", {
                  style: {
                    background: "white",
                    border: "1px solid black",
                    height: "2px",
                    left: "0",
                    position: "absolute",
                    right: "0",
                    top: "66%",
                    zIndex: "1"
                  }
                }));
}

function view(state) {
  var src = state.maybeImgSrc;
  return React.createElement("div", undefined, src !== undefined ? React.createElement("img", {
                    src: src
                  }) : null);
}

function update(state, msg) {
  if (typeof msg === "number") {
    return state;
  } else if (msg.TAG === /* SetThumbnailEl */0) {
    return {
            maybeThumbnailEl: Caml_option.some(msg._0),
            maybeImgSrc: state.maybeImgSrc
          };
  } else {
    return {
            maybeThumbnailEl: state.maybeThumbnailEl,
            maybeImgSrc: msg._0
          };
  }
}

function Thumbnail$Preview(props) {
  var initialImgSrc = Belt_Option.flatMap(Caml_option.nullable_to_opt(document.querySelector(thumbnailImgSelector)), (function (img) {
          return Caml_option.nullable_to_opt(img.getAttribute("src"));
        }));
  var initialState = {
    maybeThumbnailEl: undefined,
    maybeImgSrc: initialImgSrc
  };
  var match = React.useReducer(update, initialState);
  var dispatch = match[1];
  var state = match[0];
  var queryResult = ReactQuery$1.useQuery({
        queryKey: ["Thumbnail.Preview"],
        queryFn: query,
        staleTime: Caml_option.some(ReactQuery.time({
                  NAME: "number",
                  VAL: 1
                })),
        refetchOnMount: Caml_option.some(ReactQuery.refetchOnMount({
                  NAME: "bool",
                  VAL: true
                })),
        refetchOnWindowFocus: Caml_option.some(ReactQuery.refetchOnWindowFocus({
                  NAME: "bool",
                  VAL: false
                }))
      });
  var stillPickerWatcher = function (mutationList, obs) {
    mutationList.forEach(function (mutation) {
          var target = mutation.target;
          var node = Webapi__Dom__Element.ofNode(target);
          var name = target.nodeName;
          var attr = mutation.attributeName;
          var uploaderIsSelected = Belt_Option.flatMap(node, (function (el) {
                  return Caml_option.nullable_to_opt(el.getAttribute("selected"));
                }));
          var isSelected = Belt_Option.flatMap(node, (function (node) {
                  return Caml_option.nullable_to_opt(node.getAttribute("aria-selected"));
                }));
          var match = Caml_obj.equal(node, state.maybeThumbnailEl);
          var exit = 0;
          if (name === "YTCP-THUMBNAIL-UPLOADER" && uploaderIsSelected !== undefined && uploaderIsSelected === "" && !(attr == null)) {
            if (attr === "selected") {
              var src = Belt_Option.flatMap(Belt_Option.flatMap(node, (function (el) {
                          return Caml_option.nullable_to_opt(el.querySelector("img"));
                        })), (function (img) {
                      return Caml_option.nullable_to_opt(img.getAttribute("src"));
                    }));
              return Belt_Option.mapWithDefault(src, undefined, (function (src) {
                            Curry._1(dispatch, {
                                  TAG: /* SetImgSrc */1,
                                  _0: src
                                });
                          }));
            }
            exit = 2;
          } else {
            exit = 2;
          }
          if (exit === 2 && isSelected === "true") {
            var src$1 = Belt_Option.flatMap(Belt_Option.flatMap(node, (function (el) {
                        return Caml_option.nullable_to_opt(el.querySelector("img"));
                      })), (function (img) {
                    return Caml_option.nullable_to_opt(img.getAttribute("src"));
                  }));
            return Belt_Option.mapWithDefault(src$1, undefined, (function (src) {
                          Curry._1(dispatch, {
                                TAG: /* SetImgSrc */1,
                                _0: src
                              });
                        }));
          }
          if ((attr == null) || !(attr === "src" && match)) {
            return ;
          } else {
            return Belt_Option.mapWithDefault(Belt_Option.flatMap(state.maybeThumbnailEl, (function (el) {
                              return Caml_option.nullable_to_opt(el.getAttribute("src"));
                            })), undefined, (function (src) {
                          Curry._1(dispatch, {
                                TAG: /* SetImgSrc */1,
                                _0: src
                              });
                        }));
          }
        });
  };
  var thumbnailImgWatcher = function (mutationList, observer) {
    var srcChanged = mutationList.some(function (mutation) {
          var attributeName = mutation.attributeName;
          if ((attributeName == null) || attributeName !== "src") {
            return false;
          } else {
            return true;
          }
        });
    if (srcChanged) {
      console.log("should be preped");
      return ;
    }
    
  };
  React.useEffect((function () {
          
        }), []);
  var view = function (state) {
    var src = state.maybeImgSrc;
    return React.createElement("div", undefined, src !== undefined ? viewThumbnail(src) : null);
  };
  console.log("q", queryResult);
  var match$1 = queryResult.data;
  if (match$1 === undefined) {
    return null;
  }
  if (match$1.length !== 4) {
    return null;
  }
  var sidePanelEl = match$1[0];
  var stillPickerEl = match$1[1];
  var thumbnailImgEl = match$1[2];
  var thumbnailUploader = match$1[3];
  if (undefined === state.maybeThumbnailEl) {
    Curry._1(dispatch, {
          TAG: /* SetThumbnailEl */0,
          _0: thumbnailImgEl
        });
  }
  var stillPickerObserver = new MutationObserver(stillPickerWatcher);
  var thumbnailImgObserver = new MutationObserver(thumbnailImgWatcher);
  console.log("x", thumbnailUploader);
  stillPickerObserver.observe(stillPickerEl, {
        attributes: true,
        childList: true,
        subtree: true
      });
  thumbnailImgObserver.observe(thumbnailUploader, {
        attributes: true,
        childList: false,
        subtree: true
      });
  return ReactDom.createPortal(view(state), sidePanelEl);
}

var Preview = {
  make: Thumbnail$Preview
};

var client = new ReactQuery$1.QueryClient();

function Thumbnail(props) {
  return React.createElement(ReactQuery$1.QueryClientProvider, {
              client: client,
              children: React.createElement(Thumbnail$Preview, {})
            });
}

var make = Thumbnail;

export {
  sidePanelSelector ,
  thumbnailImgSelector ,
  stillPickerSelector ,
  thumbnailUploader ,
  query ,
  viewThumbnail ,
  view ,
  update ,
  Preview ,
  client ,
  make ,
}
/* client Not a pure module */
