// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ui from "../Ui.bs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as ReactDom from "react-dom";
import * as ReactQuery from "@rescriptbr/react-query/src/ReactQuery.bs.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.mjs";
import * as ReactQuery$1 from "@tanstack/react-query";

var sidePanelSelector = "ytcp-video-metadata-editor-sidepanel";

var thumbnailImgSelector = "ytcp-thumbnail-uploader img#img-with-fallback";

var stillPickerSelector = "#still-picker";

function query(param) {
  return Promise.all([
                sidePanelSelector,
                stillPickerSelector,
                thumbnailImgSelector
              ].map(function (selector) {
                  return Js_promise2.then(Ui.queryDom(undefined, selector, 3), (function (el) {
                                return el;
                              }));
                }));
}

function view(state) {
  var src = state.maybeImgSrc;
  return React.createElement("div", undefined, src !== undefined ? React.createElement("img", {
                    src: src
                  }) : null);
}

function update(state, msg) {
  if (msg) {
    return {
            maybeImgSrc: msg._0
          };
  } else {
    return state;
  }
}

function Thumbnail$Preview(props) {
  var initialImgSrc = Belt_Option.flatMap(Caml_option.nullable_to_opt(document.querySelector(thumbnailImgSelector)), (function (img) {
          return Caml_option.nullable_to_opt(img.getAttribute("src"));
        }));
  var initialState = {
    maybeImgSrc: initialImgSrc
  };
  var match = React.useReducer(update, initialState);
  var dispatch = match[1];
  var queryResult = ReactQuery$1.useQuery({
        queryKey: ["Thumbnail.Preview"],
        queryFn: query,
        staleTime: Caml_option.some(ReactQuery.time({
                  NAME: "number",
                  VAL: 1
                })),
        refetchOnMount: Caml_option.some(ReactQuery.refetchOnMount({
                  NAME: "bool",
                  VAL: true
                })),
        refetchOnWindowFocus: Caml_option.some(ReactQuery.refetchOnWindowFocus({
                  NAME: "bool",
                  VAL: false
                }))
      });
  var stillPickerWatcher = function (mutationList, obs) {
    var hasSelectedUserThumbnail = mutationList.some(function (mutation) {
          var target = mutation.target;
          var name = target.nodeName.toLocaleLowerCase();
          var attr = mutation.attributeName;
          var isSelected = Belt_Option.map(Webapi__Dom__Element.ofNode(target), (function (el) {
                  return el.hasAttribute("selected");
                }));
          console.log("asdf", name, isSelected);
          if (Caml_obj.equal((attr == null) ? undefined : Caml_option.some(attr), "selected") && name === "ytcp-thumbnail-uploader") {
            return Caml_obj.equal(isSelected, true);
          } else {
            return false;
          }
        });
    console.log("hasuserthumb", hasSelectedUserThumbnail);
    var maybeSelectedStill = hasSelectedUserThumbnail ? Belt_Option.flatMap(Caml_option.nullable_to_opt(document.querySelector(thumbnailImgSelector)), (function (img) {
              return Caml_option.nullable_to_opt(img.getAttribute("src"));
            })) : Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Caml_option.undefined_to_opt(mutationList.map(function (prim) {
                              return prim.target;
                            }).find(function (target) {
                            var attribute = Belt_Option.flatMap(Webapi__Dom__Element.ofNode(target), (function (node) {
                                    return Caml_option.nullable_to_opt(node.getAttribute("aria-selected"));
                                  }));
                            return Caml_obj.equal(attribute, "true");
                          })), Webapi__Dom__Element.ofNode), (function (el) {
                  return Caml_option.nullable_to_opt(el.querySelector("img"));
                })), (function (img) {
              return Caml_option.nullable_to_opt(img.getAttribute("src"));
            }));
    if (maybeSelectedStill !== undefined) {
      Curry._1(dispatch, /* SetImgSrc */{
            _0: maybeSelectedStill
          });
    }
    console.log("att", maybeSelectedStill);
  };
  React.useEffect((function () {
          
        }), []);
  var view = function (state) {
    var src = state.maybeImgSrc;
    return React.createElement("div", undefined, src !== undefined ? React.createElement("img", {
                      src: src
                    }) : null);
  };
  var match$1 = queryResult.data;
  if (match$1 === undefined) {
    return null;
  }
  if (match$1.length !== 3) {
    return null;
  }
  var sidePanelEl = match$1[0];
  var stillPickerEl = match$1[1];
  var stillPickerObserver = new MutationObserver(stillPickerWatcher);
  stillPickerObserver.observe(stillPickerEl, {
        attributes: true,
        childList: true,
        subtree: true
      });
  return ReactDom.createPortal(view(match[0]), sidePanelEl);
}

var Preview = {
  make: Thumbnail$Preview
};

var client = new ReactQuery$1.QueryClient();

function Thumbnail(props) {
  return React.createElement(ReactQuery$1.QueryClientProvider, {
              client: client,
              children: React.createElement(Thumbnail$Preview, {})
            });
}

var make = Thumbnail;

export {
  sidePanelSelector ,
  thumbnailImgSelector ,
  stillPickerSelector ,
  query ,
  view ,
  update ,
  Preview ,
  client ,
  make ,
}
/* client Not a pure module */
