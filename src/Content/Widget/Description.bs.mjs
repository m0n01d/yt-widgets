// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ui from "../Ui.bs.mjs";
import * as React from "react";
import * as Schema from "../../Data/Schema.bs.mjs";
import * as ReactDom from "react-dom";
import * as ReactQuery from "@rescriptbr/react-query/src/ReactQuery.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";
import Box from "@mui/material/Box";
import * as JsxRuntime from "react/jsx-runtime";
import Icon from "@mui/material/Icon";
import Table from "@mui/material/Table";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import * as ReactQuery$1 from "@tanstack/react-query";
import Collapse from "@mui/material/Collapse";
import TableRow from "@mui/material/TableRow";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableHead from "@mui/material/TableHead";
import TextField from "@mui/material/TextField";
import TableContainer from "@mui/material/TableContainer";

var videoDescriptionSelector = "ytcp-video-description";

function query(param) {
  return Promise.all([videoDescriptionSelector].map(function (selector) {
                  return Js_promise2.then(Ui.queryDom(undefined, selector, 3), (function (el) {
                                return el;
                              }));
                }));
}

var name = Schema.DescriptionSnippet.tableName;

function update(state, action) {
  if (typeof action !== "object") {
    return {
            maybeDialog: Caml_option.some(undefined),
            snippets: state.snippets
          };
  } else {
    return {
            maybeDialog: state.maybeDialog,
            snippets: action._0
          };
  }
}

function Description$Snippets(props) {
  var initialState_snippets = [];
  var initialState = {
    maybeDialog: undefined,
    snippets: initialState_snippets
  };
  var match = React.useReducer(update, initialState);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          var onMessageListener = function (param) {
            var tag = param.tag;
            if (tag === "init") {
              dispatch({
                    TAG: "GotSnippets",
                    _0: param.payload
                  });
            } else {
              throw {
                    RE_EXN_ID: "Match_failure",
                    _1: [
                      "Description.res",
                      29,
                      8
                    ],
                    Error: new Error()
                  };
            }
            console.log("app chrome port inbound", tag);
          };
          var port = chrome.runtime.connect({
                name: name
              });
          port.onMessage.addListener(onMessageListener);
        }), []);
  var viewActivateBtn = JsxRuntime.jsx(Button, {
        children: "Add Snippet",
        onClick: (function (param) {
            dispatch("OpenDialog");
          }),
        endIcon: Caml_option.some(JsxRuntime.jsx(Icon, {})),
        sx: {
          width: "100px",
          margin: "1rem 0"
        },
        variant: "contained"
      });
  var viewRow = function (snippet) {
    return JsxRuntime.jsxs(React.Fragment, {
                children: [
                  JsxRuntime.jsx(TableRow, {
                        children: Caml_option.some(JsxRuntime.jsx(TableCell, {
                                  children: Caml_option.some(snippet.name)
                                }))
                      }),
                  JsxRuntime.jsx(TableRow, {
                        children: Caml_option.some(JsxRuntime.jsx(TableCell, {
                                  children: Caml_option.some(JsxRuntime.jsx(Collapse, {
                                            unmountOnExit: true,
                                            children: Caml_option.some(JsxRuntime.jsx(Box, {
                                                      children: Caml_option.some(JsxRuntime.jsx(TextField, {
                                                                defaultValue: Caml_option.some(snippet.body),
                                                                multiline: true
                                                              }))
                                                    })),
                                            in: true
                                          }))
                                }))
                      })
                ]
              });
  };
  var viewCollapsibleTable = function (snippets) {
    return JsxRuntime.jsx(TableContainer, {
                children: Caml_option.some(JsxRuntime.jsxs(Table, {
                          children: [
                            JsxRuntime.jsx(TableHead, {
                                  children: Caml_option.some(JsxRuntime.jsx(TableRow, {
                                            children: Caml_option.some(JsxRuntime.jsx(TableCell, {
                                                      children: "Column 1"
                                                    }))
                                          }))
                                }),
                            JsxRuntime.jsx(TableBody, {
                                  children: Caml_option.some(snippets.map(viewRow))
                                })
                          ]
                        }))
              });
  };
  var viewDialog = function () {
    return JsxRuntime.jsx(Dialog, {
                open: true,
                children: Caml_option.some(viewCollapsibleTable(state.snippets))
              });
  };
  var view = function (state) {
    var match = state.maybeDialog;
    var maybeDialog = match !== undefined ? viewDialog() : null;
    return [
            maybeDialog,
            viewActivateBtn
          ];
  };
  var queryResult = ReactQuery$1.useQuery({
        queryKey: [name],
        queryFn: query,
        staleTime: Caml_option.some(ReactQuery.time({
                  NAME: "number",
                  VAL: 1
                })),
        refetchOnMount: Caml_option.some(ReactQuery.refetchOnMount({
                  NAME: "bool",
                  VAL: true
                })),
        refetchOnWindowFocus: Caml_option.some(ReactQuery.refetchOnWindowFocus({
                  NAME: "bool",
                  VAL: false
                }))
      });
  var match$1 = queryResult.data;
  if (match$1 === undefined) {
    return null;
  }
  if (match$1.length !== 1) {
    return null;
  }
  var el = match$1[0];
  return ReactDom.createPortal(view(state), el);
}

var Snippets = {
  name: name,
  update: update,
  make: Description$Snippets
};

var client = new ReactQuery$1.QueryClient();

function Description(props) {
  return JsxRuntime.jsx(ReactQuery$1.QueryClientProvider, {
              client: client,
              children: JsxRuntime.jsx(Description$Snippets, {})
            });
}

var make = Description;

export {
  videoDescriptionSelector ,
  query ,
  Snippets ,
  client ,
  make ,
}
/* client Not a pure module */
