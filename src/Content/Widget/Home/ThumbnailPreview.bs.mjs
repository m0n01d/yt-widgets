// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Hooks from "../../../Util/Hooks.bs.mjs";
import * as React from "react";
import * as ReactQuery from "@rescriptbr/react-query/src/ReactQuery.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.mjs";
import * as ReactQuery$1 from "@tanstack/react-query";

function query(param) {
  return Promise.all(Array.prototype.slice.call(document.querySelectorAll("ytd-browse #contents ytd-rich-grid-media")).map(function (el) {
                      return Webapi__Dom__Element.ofNode(el);
                    }).map(function (maybeEl) {
                    if (maybeEl !== undefined) {
                      return Promise.resolve(Caml_option.valFromOption(maybeEl));
                    } else {
                      return Promise.reject(new Error("Not Found"));
                    }
                  })).then(function (els) {
              if (els.length === 0) {
                return Promise.reject(new Error("Not Found"));
              } else {
                return Promise.resolve(els);
              }
            });
}

function ThumbnailPreview$ThumbnailPreview(props) {
  var match = Hooks.Preview.usePort("Home.Thumbnail.Preview");
  var maybeThumbnailData = match.maybeThumbnailData;
  var match$1 = React.useState(function () {
        return "NoElements";
      });
  var setState = match$1[1];
  var state = match$1[0];
  var queryResult = ReactQuery$1.useQuery({
        queryKey: ["Home.Thumbnail.Preview"],
        queryFn: query,
        retry: Caml_option.some(ReactQuery.retry({
                  NAME: "number",
                  VAL: 69
                })),
        retryDelay: Caml_option.some(ReactQuery.retryDelay({
                  NAME: "number",
                  VAL: 333
                })),
        staleTime: Caml_option.some(ReactQuery.time({
                  NAME: "number",
                  VAL: 1
                })),
        refetchOnMount: Caml_option.some(ReactQuery.refetchOnMount({
                  NAME: "bool",
                  VAL: true
                })),
        refetchOnWindowFocus: Caml_option.some(ReactQuery.refetchOnWindowFocus({
                  NAME: "bool",
                  VAL: false
                }))
      });
  React.useEffect(function () {
        if (typeof state === "object" && state.TAG !== "FlushedWithElements" && maybeThumbnailData !== undefined) {
          var titleEl = state.titleEl;
          var thumbEl = state.thumbEl;
          Math.floor(Math.random() * 4.0) | 0;
          thumbEl.setAttribute("src", maybeThumbnailData.src);
          titleEl.innerText = maybeThumbnailData.title;
          setState(function (param) {
                return {
                        TAG: "FlushedWithElements",
                        thumbEl: thumbEl,
                        titleEl: titleEl
                      };
              });
        }
        
      });
  if (queryResult.isError) {
    console.log(queryResult.error);
  } else if (typeof state !== "object") {
    var videoElements = queryResult.data;
    if (videoElements !== undefined) {
      var index = Math.floor(Math.random() * 4.0) | 0;
      var videoElement = videoElements[index];
      var thumbEl = Core__Option.getExn(Caml_option.nullable_to_opt(videoElement.querySelector("ytd-thumbnail img")));
      var titleEl = Core__Option.getExn(Caml_option.nullable_to_opt(videoElement.querySelector("#video-title-link yt-formatted-string")));
      setState(function (param) {
            return {
                    TAG: "GotElements",
                    thumbEl: thumbEl,
                    titleEl: titleEl
                  };
          });
    }
    
  } else {
    state.TAG === "FlushedWithElements";
  }
  return null;
}

var ThumbnailPreview = {
  make: ThumbnailPreview$ThumbnailPreview
};

var client = new ReactQuery$1.QueryClient();

function ThumbnailPreview$1(props) {
  return JsxRuntime.jsx(ReactQuery$1.QueryClientProvider, {
              client: client,
              children: JsxRuntime.jsx(ThumbnailPreview$ThumbnailPreview, {})
            });
}

var make = ThumbnailPreview$1;

export {
  query ,
  ThumbnailPreview ,
  client ,
  make ,
}
/* client Not a pure module */
